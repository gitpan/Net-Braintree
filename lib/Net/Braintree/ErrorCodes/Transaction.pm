package Net::Braintree::ErrorCodes::Transaction;
use strict;

use constant AmountCannotBeNegative                            => "81501";
use constant AmountIsInvalid                                   => "81503";
use constant AmountFormatIsInvalid                             => "81503";
use constant AmountIsRequired                                  => "81502";
use constant AmountIsTooLarge                                  => "81528";
use constant AmountMustBeGreaterThanZero                       => "81531";
use constant BillingAddressConflict                            => "91530";
use constant CannotBeVoided                                    => "91504";
use constant CannotCloneCredit                                 => "91543";
use constant CannotCloneTransactionWithVaultCreditCard         => "91540";
use constant CannotCloneUnsuccessfulTransaction                => "91542";
use constant CannotCloneVoiceAuthorizations                    => "91541";
use constant CannotRefundCredit                                => "91505";
use constant CannotRefundUnlessSettled                         => "91506";
use constant CannotRefundWithSuspendedMerchantAccount          => "91538";
use constant CannotSubmitForSettlement                         => "91507";
use constant ChannelIsTooLong                                  => "91550";
use constant CreditCardIsRequired                              => "91508";
use constant CustomFieldIsInvalid                              => "91526";
use constant CustomFieldIsTooLong                              => "81527";
use constant CustomerDefaultPaymentMethodCardTypeIsNotAccepted => "81509";
use constant CustomerDoesNotHaveCreditCard                     => "91511";
use constant CustomerIdIsInvalid                               => "91510";
use constant HasAlreadyBeenRefunded                            => "91512";
use constant MerchantAccountIdIsInvalid                        => "91513";
use constant MerchantAccountIsSuspended                        => "91514";
use constant MerchantAccountDoesNotSupportRefunds              => "91547";
use constant OrderIdIsTooLong                                  => "91501";
use constant PaymentMethodConflict                             => "91515";
use constant PaymentMethodConflictWithVenmoSDK                 => "91549";
use constant PaymentMethodDoesNotBelongToCustomer              => "91516";
use constant PaymentMethodDoesNotBelongToSubscription          => "91527";
use constant PaymentMethodTokenCardTypeIsNotAccepted           => "91517";
use constant PaymentMethodTokenIsInvalid                       => "91518";
use constant ProcessorAuthorizationCodeCannotBeSet             => "91519";
use constant ProcessorAuthorizationCodeIsInvalid               => "81520";
use constant ProcessorDoesNotSupportCredits                    => "91546";
use constant ProcessorDoesNotSupportVoiceAuthorizations        => "91545";
use constant PurchaseOrderNumberIsTooLong                      => "91537";
use constant PurchaseOrderNumberIsInvalid                      => "91548";
use constant RefundAmountIsTooLarge                            => "91521";
use constant SettlementAmountIsTooLarge                        => "91522";
use constant SubscriptionDoesNotBelongToCustomer               => "91529";
use constant SubscriptionIdIsInvalid                           => "91528";
use constant SubscriptionStatusMustBePastDue                   => "91531";
use constant TaxAmountCannotBeNegative                         => "81534";
use constant TaxAmountFormatIsInvalid                          => "81535";
use constant TaxAmountIsTooLarge                               => "81536";
use constant TypeIsInvalid                                     => "91523";
use constant TypeIsRequired                                    => "91524";
use constant UnsupportedVoiceAuthorization                     => "91539";

1;
